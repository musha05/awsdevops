{"version":3,"file":"static/js/586.143291da.chunk.js","mappings":"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","sources":["components/SideBar/SideMenuList.js","components/reusableComponents/SearchInput.js","pages/users/PromptDataGrid/PromptDataGrid.js","components/toastmessage/index.js","pages/users/AddUsers.js","pages/jobdescription/AddJobModal.js","pages/jobdescription/EditJobModal.js","pages/jobdescription/DeleteJobModal.js","pages/jobdescription/jobdescription.js","pages/notfound/NotFound.js","routes/approutes/AppRoutes.js","components/UpdatedNavbar/updatednavbar.js","Layout/MainLayout.js","Login/login.js","routes/authRoutes/LoginRoute.js","App.js","components/Breadcrumbs/index.js","path/global.js"],"sourcesContent":["import {React } from 'react';\r\nimport { PeopleAltOutlined, ContentPasteSearchOutlined, NoteAddOutlined, InfoOutlined } from '@mui/icons-material';\r\nimport ListItem from '@mui/material/ListItem';\r\nimport ListItemButton from '@mui/material/ListItemButton';\r\nimport ListItemIcon from '@mui/material/ListItemIcon';\r\nimport ListItemText from '@mui/material/ListItemText';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport { Link, useLocation, useNavigate} from 'react-router-dom';\r\nconst getFilteredMenu = (roleId) => {\r\n  const SideMenuList = [\r\n    {\r\n      id: 1,\r\n      name: 'users',\r\n      displayName: 'Users',\r\n      link: '/users',\r\n      icon: <PeopleAltOutlined />,\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'profile-matching',\r\n      displayName: 'Profile Matching',\r\n      link: '/profile-matching',\r\n      icon: <ContentPasteSearchOutlined />,\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'jobde-description',\r\n      displayName: 'Job Description',\r\n      link: '/job-description',\r\n      icon: <NoteAddOutlined />,\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'prompts',\r\n      displayName: \"Prompt's\",\r\n      link: '/prompts',\r\n      icon: <InfoOutlined />,\r\n    },\r\n  ];\r\n\r\n  const filteredMenu = SideMenuList.filter((item) => {\r\n    if (roleId === 1) {\r\n      return true; // Display all menus for role 1\r\n    } else if (roleId === 2 && (item.id === 1 || item.id === 2 || item.id === 3)) {\r\n      return true; // Display only id 1, 2, and 3 for role 2\r\n    } else if (roleId === 3 && (item.id === 1 || item.id === 2)) {\r\n      return true; // Display only id 1 and 2 for role 3\r\n    }\r\n    return false; // Don't display other menus\r\n  });\r\n\r\n  return filteredMenu;\r\n};\r\n\r\nconst SideMenu = ({open}) => {\r\n  const userRole = localStorage.getItem('userdetails');\r\n  const ParseData = JSON.parse(userRole);\r\n\r\n  const roleId = ParseData.user?.roleId;\r\n  const filteredMenu = getFilteredMenu(roleId, open);\r\n  const location = useLocation();\r\n  // const navigate = useNavigate();\r\n  // const handleMenuItemClick = (link) => {\r\n  //   startTransition(() => {\r\n  //     // Wrap the navigate function with startTransition\r\n  //     const accessToken = localStorage.getItem('access_token');\r\n  //     if (!accessToken) {\r\n  //       console.log(\"User is not authenticated. Redirect to login page or handle accordingly.\");\r\n  //       return;\r\n  //     }\r\n\r\n  //     // Check the link and user role before navigating\r\n  //     if (link === '/job-description' && roleId !== 3) {\r\n  //       // If the link is 'job-description' and the role is not 3, do not navigate\r\n  //       console.log(\"You don't have permission to access Job Description\");\r\n  //     } else {\r\n  //       // Navigate only if the condition is met\r\n  //       navigate(link);\r\n  //     }\r\n  //   });\r\n  // };\r\n  // Render the JSX element with the filtered menu\r\n  return (\r\n    <>\r\n      {filteredMenu.map((menu) => (\r\n        <ListItem disablePadding key={menu.id}>\r\n        <ListItemButton\r\n          component={Link}\r\n          to={menu.link}\r\n          active={open && location.pathname === menu.link ? true : false}\r\n          // onClick={() => handleMenuItemClick(menu.link)}\r\n          sx={{\r\n            backgroundColor: open && location.pathname === menu.link ? '#1976d2' : 'transparent',\r\n            color: open && location.pathname === menu.link ? '#fff' : 'inherit', // Set text color to #fff when active\r\n            '&:hover': {\r\n              backgroundColor: '#1976d2',\r\n              color: '#fff' // You can customize the hover color\r\n            }\r\n          }}\r\n        >\r\n          {open ? (\r\n            <ListItemIcon sx={{ color: open && location.pathname === menu.link ? '#fff' : 'inherit' }}>\r\n               {menu.icon}\r\n            </ListItemIcon>\r\n          ) : (\r\n            <Tooltip title={menu.displayName} placement=\"right\" arrow>\r\n              <ListItemIcon sx={{ color: open && location.pathname === menu.link ? '#fff' : 'inherit' }}>\r\n              {menu.icon}\r\n              </ListItemIcon>\r\n            </Tooltip>\r\n          )}\r\n          <ListItemText primary={menu.displayName} />\r\n        </ListItemButton>\r\n      </ListItem>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SideMenu;","// SearchInput.js\r\nimport React from 'react';\r\nimport { styled } from '@mui/material/styles';\r\nimport InputBase from '@mui/material/InputBase';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\n\r\nconst SearchContainer = styled('div')(({ theme }) => ({\r\n  position: 'relative',\r\n  borderRadius: '20px',\r\n  border: '1px solid #4880FF',\r\n  backgroundColor: '#fff',\r\n  '&:hover': {\r\n    backgroundColor: '#fff',\r\n  },\r\n  marginLeft: 0,\r\n  color: '#4880FF',\r\n  width: '50%',\r\n  [theme.breakpoints.up('sm')]: {\r\n    marginLeft: theme.spacing(1),\r\n    width: 'auto',\r\n  },\r\n}));\r\n\r\nconst SearchIconWrapper = styled('div')(({ theme }) => ({\r\n  padding: theme.spacing(0, 2),\r\n  height: '100%',\r\n  position: 'absolute',\r\n  pointerEvents: 'none',\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  justifyContent: 'center',\r\n}));\r\n\r\nconst StyledInputBase = styled(InputBase)(({ theme }) => ({\r\n  color: '#4880FF',\r\n  width: '100%',\r\n  '& .MuiInputBase-input': {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\r\n    transition: theme.transitions.create('width'),\r\n    color: '#4880FF',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: '50ch',\r\n      '&:focus': {\r\n        width: '60ch',\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst SearchInput = () => {\r\n  return (\r\n    <SearchContainer>\r\n      <SearchIconWrapper>\r\n            <SearchIcon />\r\n      </SearchIconWrapper>\r\n      <StyledInputBase\r\n        placeholder=\"Search…\"\r\n        inputProps={{ 'aria-label': 'search' }}\r\n      />\r\n    </SearchContainer>\r\n  );\r\n};\r\n\r\nexport default SearchInput;","import React, { useState, useEffect, useCallback } from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport Button from '@mui/material/Button';\r\nimport AddIcon from '@mui/icons-material/Add';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/DeleteOutlined';\r\nimport SaveIcon from '@mui/icons-material/Save';\r\nimport CancelIcon from '@mui/icons-material/Close';\r\nimport {\r\n  DataGrid,\r\n  GridRowModes,\r\n  GridActionsCellItem,\r\n  GridRowEditStopReasons,\r\n  GridToolbarContainer,\r\n} from '@mui/x-data-grid';\r\n\r\nconst generateRandomId = () => Math.random().toString(36).substring(7);\r\n\r\nfunction EditToolbar(props) {\r\n  const { setRows, setRowModesModel } = props;\r\n\r\n  const handleClick = () => {\r\n    const id = generateRandomId();\r\n    setRows((oldRows) => [...oldRows, { id, promptName: '', promptDescription: '', isNew: true }]);\r\n    setRowModesModel((oldModel) => ({\r\n      ...oldModel,\r\n      [id]: { mode: GridRowModes.Edit, fieldToFocus: 'promptName' },\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <GridToolbarContainer sx={{ marginBottom: '10px', marginTop: '10px' }}>\r\n      <Box sx={{ display: 'flex', justifyContent: 'flex-end', flexGrow: 1 }}>\r\n        <Button color=\"primary\" className=\"bg-primary\" startIcon={<AddIcon />} onClick={handleClick}>\r\n          Add Prompt\r\n        </Button>\r\n      </Box>\r\n    </GridToolbarContainer>\r\n  );\r\n}\r\n\r\nexport default function PromptDataGrid({ rowsData, onRowsChange,updatePromptRows }) {\r\n  const [rows, setRows] = useState([]);\r\n  const [rowModesModel, setRowModesModel] = useState({});\r\nconsole.log(rows,\"rows\")\r\n  const handleRowEditStop = useCallback((params, event) => {\r\n    if (params.reason === GridRowEditStopReasons.rowFocusOut) {\r\n      event.defaultMuiPrevented = true;\r\n    }\r\n  }, []);\r\n\r\n  const handleEditClick = useCallback(\r\n    (id) => () => {\r\n      setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.Edit } });\r\n    },\r\n    [rowModesModel]\r\n  );\r\n\r\n  const handleSaveClick = useCallback(\r\n    (id) => () => {\r\n      setRowModesModel({ ...rowModesModel, [id]: { mode: GridRowModes.View } });\r\n    },\r\n    [rowModesModel]\r\n  );\r\n\r\n  const handleDeleteClick = useCallback(\r\n    (id) => () => {\r\n      setRows((prevRows) => prevRows.filter((row) => row.id !== id));\r\n    },\r\n    []\r\n  );\r\n\r\n  const handleCancelClick = useCallback(\r\n    (id) => () => {\r\n      setRowModesModel({\r\n        ...rowModesModel,\r\n        [id]: { mode: GridRowModes.View, ignoreModifications: true },\r\n      });\r\n\r\n      const editedRow = rows.find((row) => row.id === id);\r\n      if (editedRow && editedRow.isNew) {\r\n        setRows((prevRows) => prevRows.filter((row) => row.id !== id));\r\n      }\r\n    },\r\n    [rows, rowModesModel]\r\n  );\r\n\r\n  const processRowUpdate = useCallback(\r\n    (newRow) => {\r\n      const updatedRow = { ...newRow, isNew: false };\r\n      setRows((prevRows) => prevRows.map((row) => (row.id === newRow.id ? updatedRow : row)));\r\n\r\n      return updatedRow;\r\n    },\r\n    []\r\n  );\r\n\r\n  const handleRowModesModelChange = useCallback((newRowModesModel) => {\r\n    setRowModesModel(newRowModesModel);\r\n    console.log(\"567457\")\r\n    updatePromptRows(rows)\r\n  }, []);\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    if (rowsData && rowsData.length > 0) {\r\n      setRows(rowsData);\r\n    }\r\n  }, [rowsData]);\r\n\r\n\r\n\r\n  const columns = [\r\n    { field: 'promptName', headerName: 'Prompt Name', flex: 1, editable: true, headerClassName: 'bg-primary text-white text-size' },\r\n    { field: 'promptDescription', headerName: 'Prompt Description', flex: 1, editable: true, headerClassName: 'bg-primary text-white text-size' },\r\n    {\r\n      field: 'actions',\r\n      type: 'actions',\r\n      headerName: 'Actions',\r\n      width: 150,\r\n      flex: 1,\r\n      cellClassName: 'actions',\r\n      headerClassName: 'bg-primary text-white text-size',\r\n      getActions: ({ id }) => {\r\n        const isInEditMode = rowModesModel[id]?.mode === GridRowModes.Edit;\r\n\r\n        if (isInEditMode) {\r\n          return [\r\n            <GridActionsCellItem\r\n              icon={<SaveIcon />}\r\n              label=\"Save\"\r\n              className=\"button-a\"\r\n              sx={{\r\n                color: 'primary.main',\r\n              }}\r\n              onClick={handleSaveClick(id)}\r\n            />,\r\n            <GridActionsCellItem\r\n              icon={<CancelIcon />}\r\n              label=\"Cancel\"\r\n              className=\"textPrimary button-a\"\r\n              onClick={handleCancelClick(id)}\r\n              color=\"inherit\"\r\n            />,\r\n          ];\r\n        }\r\n\r\n        return [\r\n          <GridActionsCellItem\r\n            icon={<EditIcon />}\r\n            label=\"Edit\"\r\n            className=\"textPrimary button-a\"\r\n            onClick={handleEditClick(id)}\r\n            color=\"inherit\"\r\n          />,\r\n          <GridActionsCellItem\r\n            icon={<DeleteIcon />}\r\n            label=\"Delete\"\r\n            onClick={handleDeleteClick(id)}\r\n            color=\"inherit\"\r\n            className=\"button-a\"\r\n          />,\r\n        ];\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Box\r\n      sx={{\r\n        height: 500,\r\n        width: '100%',\r\n        '& .actions': {\r\n          color: 'text.secondary',\r\n        },\r\n        '& .textPrimary': {\r\n          color: 'text.primary',\r\n        },\r\n      }}\r\n    >\r\n      <DataGrid\r\n        rows={rows}\r\n        columns={columns}\r\n        editMode=\"row\"\r\n        rowModesModel={rowModesModel}\r\n        onRowModesModelChange={handleRowModesModelChange}\r\n        onRowEditStop={handleRowEditStop}\r\n        processRowUpdate={processRowUpdate}\r\n      \r\n        slots={{\r\n          toolbar: EditToolbar,\r\n        }}\r\n        slotProps={{\r\n          toolbar: { setRows, setRowModesModel },\r\n        }}\r\n      />\r\n    </Box>\r\n  );\r\n}","import React, { useState } from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport Alert from '@mui/material/Alert';\r\n\r\nconst SnackbarComponent =({ message, severity = 'success', autoHideDuration = 6000, position = { vertical: 'top', horizontal: 'right' } }) => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClick = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button onClick={handleClick}>Open Snackbar</Button>\r\n      <Snackbar\r\n        open={open}\r\n        autoHideDuration={autoHideDuration}\r\n        onClose={handleClose}\r\n        anchorOrigin={position}\r\n      >\r\n        <Alert\r\n          onClose={handleClose}\r\n          severity={severity}\r\n          variant=\"filled\"\r\n          sx={{ width: '100%' }}\r\n        >\r\n          {message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SnackbarComponent;","// ** User List Component\r\nimport { Fragment, useState, useEffect  } from 'react'\r\nimport { IconButton, InputAdornment, TextField } from '@mui/material';\r\nimport Grid from '@mui/material/Grid';\r\nimport Box from '@mui/material/Box';\r\nimport Card from '@mui/material/Card';\r\nimport { CardContent, Select, MenuItem, InputLabel, FormControl } from '@mui/material';\r\nimport Typography from '@mui/material/Typography';\r\nimport ResBreadcrumbs from '../../components/Breadcrumbs'\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport { useForm } from 'react-hook-form'\r\nimport GlobalVariable from '../../path/global'\r\nimport axios from 'axios';\r\nimport PromptDataGrid from './PromptDataGrid/PromptDataGrid';\r\nimport { Button } from '@mui/material';\r\nimport ToastSnackbars from '../../components/toastmessage'\r\nimport toast from \"react-hot-toast\"\r\n\r\nconst baseApiUrl = GlobalVariable.BASE_API_URL\r\n\r\n\r\nconst initialRows = [\r\n    { id: '1', promptName: 'Custom Prompt 1', promptDescription: 'Custom Description 1' },\r\n    { id: '2', promptName: 'Custom Prompt 2', promptDescription: 'Custom Description 2' },\r\n  ];\r\nconst AddUserList = () => {\r\n    const [name, setName] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [isSubmitDisabled, setIsSubmitDisabled] = useState(false)\r\n    const [showPassword, setShowPassword] = useState(false)\r\n    const [password, setPassword] = useState('')\r\n    const [selectedRole, setSelectedRole] = useState('');\r\n    const [promptRows, setPromptRows] = useState([]);\r\nconsole.log(promptRows,\"pr\")\r\n    \r\n\r\n\r\n    const {\r\n        register,\r\n        handleSubmit,\r\n        formState: { errors }\r\n      } = useForm({})\r\n\r\n      useEffect(() => {\r\n        // Fetch data from your API endpoint\r\n        const fetchData = async () => {\r\n          try {\r\n            const response = await axios.get(`${baseApiUrl}job_analysis/roles`);\r\n            console.log(response)\r\n            // setRoles(response.data); // Assuming the result is an array of objects with id and name fields\r\n          } catch (error) {\r\n            console.error('Error fetching data:', error);\r\n          }\r\n        };\r\n    \r\n        fetchData();\r\n      }, []);\r\n\r\n      useEffect(() => {\r\n        setPromptRows(initialRows)\r\n      }, [promptRows]);\r\n\r\n    const handleNameChange = (e) => {\r\n        const { value } = e.target\r\n        setName(value)\r\n      }\r\n\r\n      const handleEmailChange = (e) => {\r\n        const { value } = e.target\r\n        setEmail(value)\r\n      }\r\n\r\n      const handlePasswordChange = (e) => {\r\n        const { value } = e.target\r\n        setPassword(value)\r\n      }\r\n      const handleClickShowPassword = () => {\r\n        setShowPassword(!showPassword)\r\n      }\r\n\r\n      const handleChange = (event) => {\r\n        setSelectedRole(event.target.value);\r\n      };\r\n\r\n      const dummyData = [\r\n        { id: 1, name: 'Admin' },\r\n        { id: 2, name: 'Account Manager' },\r\n        { id: 3, name: 'Recruiter' },\r\n    ];\r\n\r\n    const updatePromptRows = (newRows) => {\r\n        console.log(newRows,\"nree\")\r\n        setPromptRows(newRows);\r\n        console.log(promptRows,\"rttttttttttttttttttttt\")\r\n      };\r\n   \r\n      const onRowsChange = (newRows) => {\r\n        // Handle the change of rows here if needed\r\n        console.log('Rows changed:', newRows);\r\n      };\r\n      const onSubmit  = async () => {\r\n        setIsSubmitDisabled(true)\r\n        const editedPrompts = promptRows.map((row) => ({\r\n            id: row.id,\r\n            promptName: row.promptName,\r\n            promptDescription: row.promptDescription,\r\n          }));\r\n        \r\n          const requestData = {\r\n            user: { name, email, password, roleId: selectedRole },\r\n            prompts: editedPrompts,\r\n          };\r\n        \r\n          console.log(requestData, \"------------- Users Data Validate\");\r\n        await axios.post(`${baseApiUrl}job-analysis/addusers`,{ requestData})\r\n        .then(response => {\r\n            if (response.data.status_code === 200) {\r\n                toast(t => (<ToastSnackbars t={t} message={\"You have successfully logged\"} status={\"success\"} />));\r\n            console.log(\"successful\");\r\n            }\r\n        }).catch(error =>{\r\n            if (error.response && error.response.data.status_code === 401) {\r\n                toast(t => (<ToastSnackbars t={t} message={\"Invalid account, Email or Password do not match.\"} status={\"danger\"} />));\r\n            } else if (error.response && error.response.data.status_code === 422) {\r\n                // Handle other specific status codes as needed\r\n            } else {\r\n                // Handle generic error\r\n            }\r\n        }).finally(() => {\r\n            setIsSubmitDisabled(false); // Enable the submit button after login attempt\r\n        });\r\n\r\n      \r\n      }\r\n    return (\r\n        <Fragment>\r\n            <ResBreadcrumbs title='Users ' data={[{ title: 'Dashboard' }]}/>\r\n\r\n            <div className='app-user-list'>\r\n                <Card>\r\n                        <Box sx={{padding: '10px 15px'}}>\r\n                                <Typography fontSize={20} fontWeight={700}>Add User</Typography>\r\n                        </Box>\r\n                        <CardContent>\r\n                            <Box component={'form'} onSubmit={handleSubmit(onSubmit)}>\r\n                            <Grid container spacing={2} alignItems={'center'} sx={{padding: '0px 0px 16px '}}>\r\n                                <Grid item xs={12} sm={3} md={3}>\r\n                                    <TextField\r\n                                        margin=\"normal\"\r\n                                        required\r\n                                        fullWidth\r\n                                        sm={12}\r\n                                        id=\"name\"\r\n                                        label=\"Name\"\r\n                                        name=\"name\"\r\n                                        {...register('name', {\r\n                                        required: 'Name is required'\r\n                                        })}\r\n                                        error={Boolean(errors.name)}\r\n                                        helperText={errors.name?.message}\r\n                                        value={name}\r\n                                        onChange={(e) => {\r\n                                        handleNameChange(e)\r\n                                        }}\r\n                                        autoComplete=\"Off\"\r\n                                        autoFocus\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={3} md={3}>\r\n                                <TextField\r\n                                        margin=\"normal\"\r\n                                        required\r\n                                        fullWidth\r\n                                        sm={12}\r\n                                        id=\"email\"\r\n                                        label=\"Email\"\r\n                                        name=\"email\"\r\n                                        {...register('email', {\r\n                                        required: 'Email is required'\r\n                                        })}\r\n                                        error={Boolean(errors.email)}\r\n                                        helperText={errors.email?.message}\r\n                                        value={email}\r\n                                        onChange={(e) => {\r\n                                        handleEmailChange(e)\r\n                                        }}\r\n                                        autoComplete=\"Off\"\r\n                                        \r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={3} md={3}>\r\n                                <TextField\r\n                                    margin=\"normal\"\r\n                                    required\r\n                                    fullWidth\r\n                                    type={showPassword ? \"text\" : \"password\"}\r\n                                    name=\"password\"\r\n                                    value={password}\r\n                                    label=\"Password\"\r\n                                    {...register('password', {\r\n                                    required: 'Password is required',\r\n                                    minLength: {\r\n                                        value: 6,\r\n                                        message: 'Password must be at least 6 characters',\r\n                                    },\r\n                                    })}\r\n                                    error={Boolean(errors.password)}\r\n                                    helperText={errors.password?.message}\r\n                                    onChange={(e) => {\r\n                                    handlePasswordChange(e)\r\n                                    }}\r\n                                    InputProps={{\r\n                                    endAdornment: (\r\n                                        <InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"toggle password visibility\"\r\n                                            onClick={handleClickShowPassword}\r\n                                            edge=\"end\"\r\n                                        >\r\n                                            {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                                        </IconButton>\r\n                                        </InputAdornment>\r\n                                    ),\r\n                                    }}\r\n                                    id=\"password\"\r\n                                    autoComplete=\"current-password\"\r\n                                />\r\n                                </Grid>\r\n                                <Grid item xs={12} sm={3} md={3}>\r\n                                <FormControl fullWidth sx={{top: '3px'}}>\r\n                                    <InputLabel id=\"select-label\">Select a Role</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"select-label\"\r\n                                        id=\"select\"\r\n                                        value={selectedRole}\r\n                                        onChange={handleChange}\r\n                                        label=\"Select an Option\"\r\n                                    >\r\n                                        {dummyData.map((item) => (\r\n                                        <MenuItem key={item.id} value={item.id}>\r\n                                            {item.name}\r\n                                        </MenuItem>\r\n                                        ))}\r\n                                    </Select>\r\n                                    </FormControl>\r\n                                </Grid>\r\n                            \r\n                            </Grid>\r\n                      \r\n                          \r\n                            <Grid container spacing={2}>\r\n                                <Grid item xs={12} sm={12}>\r\n                                    <PromptDataGrid rowsData={promptRows}  onRowsChange={onRowsChange}  updatePromptRows={updatePromptRows}/>\r\n                                </Grid>\r\n                            </Grid>\r\n                            <Grid container justifyContent={'flex-end'}>\r\n                            <Button color=\"primary\" type=\"submit\" disabled={isSubmitDisabled} className='bg-primary' sx={{marginTop: '10px'}}>\r\n                                Save User\r\n                                            </Button>\r\n                            </Grid>\r\n                            \r\n                            </Box>\r\n                        </CardContent>\r\n                </Card>\r\n               \r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default AddUserList\r\n","// AddJobModal.jsx\r\nimport React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\nimport { styled } from '@mui/system';\r\n\r\nconst StyledButton = styled(Button)(({ theme }) => ({\r\n  fontSize: '18px',\r\n  '&:hover': {\r\n    color: theme.palette.common.white,\r\n    backgroundColor: theme.palette.primary.main,\r\n  },\r\n}));\r\n\r\nconst AddJobModal = ({ open, onClose, onSave }) => {\r\n  const [formData, setFormData] = useState({\r\n    jobName: '',\r\n    jobDescription: '',\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevData) => ({ ...prevData, [name]: value }));\r\n  };\r\n\r\n  const handleSave = () => {\r\n    onSave(formData.jobName, formData.jobDescription);\r\n\r\n    const existingData = JSON.parse(localStorage.getItem('jobData')) || [];\r\n    const newData = { jobName: formData.jobName, jobDescription: formData.jobDescription };\r\n    const updatedData = [...existingData, newData];\r\n    localStorage.setItem('jobData', JSON.stringify(updatedData));\r\n\r\n    setFormData({ jobName: '', jobDescription: '' });\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onClose={onClose} maxWidth=\"sm\" fullWidth>\r\n      <DialogTitle sx={{ backgroundColor: '#4880FF', color: 'white', display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '8px', fontSize: '20px' }}>\r\n        <span>Add Job</span>\r\n        <IconButton onClick={onClose} style={{ color: 'white' }}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <TextField\r\n          label=\"Job Name\"\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          margin=\"normal\"\r\n          name=\"jobName\"\r\n          value={formData.jobName}\r\n          onChange={handleChange}\r\n        />\r\n        <TextField\r\n          label=\"Job Description\"\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          multiline\r\n          rows={4}\r\n          margin=\"normal\"\r\n          name=\"jobDescription\"\r\n          value={formData.jobDescription}\r\n          onChange={handleChange}\r\n        />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <StyledButton\r\n          onClick={onClose}\r\n          color=\"primary\"\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n        >\r\n          Cancel\r\n        </StyledButton>\r\n        <Button\r\n          onClick={handleSave}\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          size=\"small\"\r\n          style={{ fontSize: '18px' }}\r\n        >\r\n          Save\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nAddJobModal.propTypes = {\r\n  open: PropTypes.bool.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  onSave: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddJobModal;\r\n","// EditJobModal.jsx\r\nimport React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\nconst EditJobModal = ({ open, onClose, onSave, initialData }) => {\r\n  const [formData, setFormData] = useState({\r\n    jobName: initialData.jobdescriptionName,\r\n    jobDescription: initialData.jobDescription,\r\n  });\r\n\r\n  console.log(initialData)\r\n  useEffect(() => {\r\n    setFormData({\r\n      jobName: initialData.jobdescriptionName,\r\n      jobDescription: initialData.jobDescription,\r\n    });\r\n  }, [initialData]);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevData) => ({ ...prevData, [name]: value }));\r\n  };\r\n\r\n  const handleSave = () => {\r\n    onSave(initialData.jobdescriptionName, formData.jobName, formData.jobDescription);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onClose={onClose} maxWidth=\"sm\" fullWidth>\r\n      <DialogTitle style={{ backgroundColor: '#4880FF', color: 'white', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n        Edit Job\r\n        <IconButton onClick={onClose} style={{ color: 'white' }}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <TextField\r\n          label=\"Job Name\"\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          margin=\"normal\"\r\n          name=\"jobName\"\r\n          value={formData.jobName}\r\n          onChange={handleChange}\r\n        />\r\n        <TextField\r\n          label=\"Job Description\"\r\n          variant=\"outlined\"\r\n          fullWidth\r\n          multiline\r\n          rows={4}\r\n          margin=\"normal\"\r\n          name=\"jobDescription\"\r\n          value={formData.jobDescription}\r\n          onChange={handleChange}\r\n        />\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={onClose} color=\"primary\" variant=\"contained\" size=\"small\">\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={handleSave} color=\"primary\" variant=\"contained\" size=\"small\">\r\n          Save\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nEditJobModal.propTypes = {\r\n  open: PropTypes.bool.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  onSave: PropTypes.func.isRequired,\r\n  initialData: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default EditJobModal;","// DeleteJobModal.jsx\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\nconst DeleteJobModal = ({ open, onClose, onDelete, jobName }) => {\r\n  const handleDelete = () => {\r\n    onDelete(jobName);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} onClose={onClose} maxWidth=\"sm\" fullWidth>\r\n      <DialogTitle style={{ backgroundColor: '#4880FF', color: 'white', display: 'flex', justifyContent: 'space-between', alignItems: 'center', padding: '16px' }}>\r\n        Delete Job\r\n        <IconButton onClick={onClose} style={{ color: 'white' }}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      </DialogTitle>\r\n      <DialogContent style={{ padding: '16px' }}>\r\n        <p style={{ marginBottom: '16px' }}>Are you sure you want to delete the job \"{jobName}\"?</p>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={onClose} color=\"primary\" variant=\"contained\">\r\n          Cancel\r\n        </Button>\r\n        <Button onClick={handleDelete} color=\"primary\" variant=\"contained\">\r\n          Delete\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nDeleteJobModal.propTypes = {\r\n  open: PropTypes.bool.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  jobName: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default DeleteJobModal;\r\n","// JobDescription.jsx\r\nimport React, { useEffect, useState } from 'react';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport Breadcrumbs from '@mui/material/Breadcrumbs';\r\nimport Typography from '@mui/material/Typography';\r\nimport Grid from '@mui/material/Grid';\r\nimport Button from '@mui/material/Button';\r\nimport TextField from '@mui/material/TextField';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport Pagination from '@mui/material/Pagination';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport EditIcon from '@mui/icons-material/Edit';\r\nimport DeleteIcon from '@mui/icons-material/Delete';\r\nimport AddJobModal from './AddJobModal';\r\nimport EditJobModal from './EditJobModal';\r\nimport DeleteJobModal from './DeleteJobModal';\r\n\r\nconst JobDescription = () => {\r\n  const [isSmallScreen, setIsSmallScreen] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [entriesToShow, setEntriesToShow] = useState(10); // Initial value is set to 10\r\n  const [isAddModalOpen, setAddModalOpen] = useState(false);\r\n  const [isEditModalOpen, setEditModalOpen] = useState(false);\r\n  const [selectedJobData, setSelectedJobData] = useState(null);\r\n  const [selectedJobToDelete, setSelectedJobToDelete] = useState(null);\r\n  const [isDeleteModalOpen, setDeleteModalOpen] = useState(false);\r\n\r\n  const [rowsData, setRowsData] = useState([\r\n    { jobdescriptionName: 'Job 1', jobDescription: 'Description 1' },\r\n    { jobdescriptionName: 'Job 2', jobDescription: 'Description 2' },\r\n    { jobdescriptionName: 'Job 3', jobDescription: 'Description 3' },\r\n    { jobdescriptionName: 'Job 4', jobDescription: 'Description 4' },\r\n\r\n    // Add more rows as needed\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setIsSmallScreen(window.innerWidth <= 600);\r\n    };\r\n\r\n    handleResize();\r\n\r\n    window.addEventListener('resize', handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, []);\r\n\r\n  const columns = [\r\n    { field: 'jobdescriptionName', headerName: 'Job Description Name', flex: 1, headerClassName: 'bg-primary text-white' },\r\n    { field: 'jobDescription', headerName: 'Job Description', flex: 1, headerClassName: 'bg-primary text-white' },\r\n    {\r\n      field: 'actions',\r\n      headerName: 'Actions',\r\n      flex: 1,\r\n      renderCell: (params) => (\r\n        <>\r\n          <Tooltip title=\"Edit\" arrow>\r\n            <Button\r\n              size=\"small\"\r\n              style={{ marginRight: '8px' }}\r\n              onClick={() => handleEditClick(params.row)}\r\n            >\r\n              <EditIcon color=\"primary\" />\r\n            </Button>\r\n          </Tooltip>\r\n          {isSmallScreen ? (\r\n            <Tooltip title=\"Delete\" arrow>\r\n              <Button\r\n                size=\"small\"\r\n                onClick={() => handleDeleteClick(params.row.jobdescriptionName)}\r\n              >\r\n                <DeleteIcon color=\"primary\" />\r\n              </Button>\r\n            </Tooltip>\r\n          ) : (\r\n            <Button\r\n              size=\"small\"\r\n              onClick={() => handleDeleteClick(params.row.jobdescriptionName)}\r\n            >\r\n              <DeleteIcon color=\"primary\" />\r\n            </Button>\r\n          )}\r\n        </>\r\n      ),\r\n      headerClassName: 'bg-primary text-white',\r\n    },\r\n  ];\r\n\r\n  const getRowId = (row) => row.jobdescriptionName;\r\n\r\n  const filteredRows = rowsData.filter(\r\n    (row) =>\r\n      (row.jobdescriptionName &&\r\n        row.jobdescriptionName.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n      (row.jobDescription &&\r\n        row.jobDescription.toLowerCase().includes(searchTerm.toLowerCase()))\r\n  );\r\n\r\n  const CustomPagination = () => (\r\n    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginTop: '8px' }}>\r\n      <div>\r\n        {/* Removed Showing 1 to {Math.min(currentPage * (isSmallScreen ? 3 : 5), filteredRows.length)} of {filteredRows.length} entries */}\r\n      </div>\r\n      <div style={{ display: 'flex', alignItems: 'center' }}>\r\n        <Typography style={{ marginRight: '8px' }}>Rows</Typography>\r\n        <TextField\r\n          select\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          value={entriesToShow}\r\n          onChange={(e) => setEntriesToShow(e.target.value)}\r\n          // style={{ width: '60px' }} // Reduced the width\r\n        >\r\n          {[5, 10, 20].map((option) => (\r\n            <MenuItem key={option} value={option}>\r\n              {option}\r\n            </MenuItem>\r\n          ))}\r\n        </TextField>\r\n        {/* <Typography style={{ margin: '0 8px' }}>Entries</Typography> */}\r\n        <Pagination\r\n          color=\"primary\"\r\n          count={Math.ceil(filteredRows.length / entriesToShow)}\r\n          page={currentPage}\r\n          onChange={(event, value) => setCurrentPage(value)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const handleAddModalOpen = () => {\r\n    setAddModalOpen(true);\r\n  };\r\n\r\n  const handleAddModalClose = () => {\r\n    setAddModalOpen(false);\r\n  };\r\n\r\n  const handleEditClick = (rowData) => {\r\n    setSelectedJobData(rowData);\r\n    setEditModalOpen(true);\r\n  };\r\n\r\n  const handleEditModalClose = () => {\r\n    setEditModalOpen(false);\r\n    setSelectedJobData(null);\r\n  };\r\n\r\n  const handleSaveNewJob = (newJobName, newJobDescription) => {\r\n    const newJob = { jobdescriptionName: newJobName, jobDescription: newJobDescription };\r\n    setRowsData((prevRows) => [...prevRows, newJob]);\r\n    handleAddModalClose();\r\n  };\r\n\r\n  const handleSaveEditJob = (originalJobName, newJobName, newJobDescription) => {\r\n    setRowsData((prevRows) =>\r\n      prevRows.map((row) =>\r\n        row.jobdescriptionName === originalJobName\r\n          ? { jobdescriptionName: newJobName, jobDescription: newJobDescription }\r\n          : row\r\n      )\r\n    );\r\n    handleEditModalClose();\r\n  };\r\n\r\n  const handleDeleteClick = (jobName) => {\r\n    setSelectedJobToDelete(jobName);\r\n    setDeleteModalOpen(true);\r\n  };\r\n\r\n  const handleDeleteModalClose = () => {\r\n    setSelectedJobToDelete(null);\r\n    setDeleteModalOpen(false);\r\n  };\r\n\r\n  const handleDeleteJob = (jobName) => {\r\n    setRowsData((prevRows) => prevRows.filter((row) => row.jobdescriptionName !== jobName));\r\n    handleDeleteModalClose();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Breadcrumbs aria-label=\"breadcrumb\">\r\n  <Typography color=\"textPrimary\">Job Descriptions</Typography>\r\n</Breadcrumbs>\r\n\r\n\r\n      <Card variant=\"outlined\" style={{ marginTop: '16px' }}>\r\n        <CardContent>\r\n          <Grid container spacing={2} alignItems=\"center\" justifyContent=\"flex-end\">\r\n            <Grid item>\r\n              <Tooltip title=\"Search Job Descriptions\" arrow>\r\n                <TextField\r\n                  label=\"Search\"\r\n                  variant=\"outlined\"\r\n                  size=\"small\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => setSearchTerm(e.target.value)}\r\n                  style={{ marginRight: '8px' }}\r\n                />\r\n              </Tooltip>\r\n            </Grid>\r\n            <Grid item>\r\n              <Tooltip title=\"Add Job Description\" arrow>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  size=\"small\"\r\n                  style={{ borderRadius: '10px', marginLeft: '8px' }}\r\n                  onClick={handleAddModalOpen}\r\n                >\r\n                  Add +\r\n                </Button>\r\n              </Tooltip>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <div style={{ width: '100%' }}>\r\n                <DataGrid\r\n                  rows={filteredRows}\r\n                  columns={columns}\r\n                  pageSize={entriesToShow}\r\n                  autoHeight\r\n                  getRowId={getRowId}\r\n                  disableRowSelectionOnClick\r\n                  disableColumnMenu\r\n                  pagination\r\n                  paginationMode=\"server\"\r\n                  onPageChange={(params) => setCurrentPage(params.page)}\r\n                  components={{\r\n                    Pagination: CustomPagination,\r\n                  }}\r\n                />\r\n              </div>\r\n            </Grid>\r\n          </Grid>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <AddJobModal open={isAddModalOpen} onClose={handleAddModalClose} onSave={handleSaveNewJob} />\r\n      {selectedJobData && (\r\n        <EditJobModal\r\n          open={isEditModalOpen}\r\n          onClose={handleEditModalClose}\r\n          onSave={handleSaveEditJob}\r\n          initialData={selectedJobData}\r\n        />\r\n      )}\r\n      {selectedJobToDelete && (\r\n        <DeleteJobModal\r\n          open={isDeleteModalOpen}\r\n          onClose={handleDeleteModalClose}\r\n          onDelete={handleDeleteJob}\r\n          jobName={selectedJobToDelete}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JobDescription;\r\n","// import { colors } from '@mui/material';\r\nimport React from 'react';\r\nimport Box from '@mui/material/Box';\r\n// import Link from \"@mui/material/Link\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport CardContent from '@mui/material/CardContent';\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <div className='Notfound-container'>\r\n     \r\n          <CardContent>\r\n            <Box display={'flex'} width={'100%'} className=\"p-5px\">\r\n            <Typography color='#202224' paddingRight={1} sx={{ fontSize: 45 }} style={{ fontWeight: '900' }} >\r\n                  404-\r\n                </Typography>\r\n               <Typography color='#FFFFFF' paddingRight={1} sx={{ fontSize: 45 }} style={{ fontWeight: '700' }} >\r\n                  Page\r\n                </Typography>\r\n                <Typography color='#FFFFFF' sx={{ fontSize: 45 }} style={{ fontWeight: '700' }}>\r\n                  Not Found\r\n                </Typography>\r\n              </Box>\r\n           </CardContent>\r\n\r\n        \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\nimport { Routes, Route, Navigate } from 'react-router-dom';\r\nimport AddUserList from '../../pages/users/AddUsers';\r\nimport JobDescription from '../../pages/jobdescription/jobdescription';\r\nimport NotFound from '../../pages/notfound/NotFound';\r\nimport { lazy } from 'react'\r\n\r\nconst ProfileMatchList = lazy(() => import('../../pages/profilematching-page/index'))\r\nconst UserData = lazy(() => import('../../pages/users/index'))\r\nconst Prompt = lazy(() => import('../../pages/prompts/prompt'))\r\n\r\nconst AppRoutes = () => {\r\n  return (\r\n    <>\r\n      <Routes>\r\n\r\n        <Route\r\n          path='/'\r\n          element={\r\n            <Navigate\r\n              to='/users'\r\n              replace\r\n            />\r\n          }\r\n        />\r\n        \r\n        <Route\r\n          path='/users'\r\n          element={<UserData />}\r\n        />\r\n         <Route\r\n          path='/users/add-user'\r\n          element={<AddUserList />}\r\n        />\r\n        <Route\r\n          path='/profile-matching'\r\n          element={<ProfileMatchList />}\r\n        />\r\n        <Route\r\n          path='/job-description'\r\n          element={<JobDescription/>}\r\n        />\r\n        <Route\r\n          path='/prompts'\r\n          element={<Prompt/>}\r\n        />\r\n        <Route\r\n          path='/profile'\r\n          element={<NotFound />}\r\n        />\r\n      </Routes>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AppRoutes;\r\n","import * as React from 'react';\r\nimport { styled, useTheme, ThemeProvider } from '@mui/material/styles';\r\nimport Box from '@mui/material/Box';\r\nimport MuiDrawer from '@mui/material/Drawer';\r\nimport MuiAppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport List from '@mui/material/List';\r\nimport CssBaseline from '@mui/material/CssBaseline';\r\nimport Typography from '@mui/material/Typography';\r\nimport Divider from '@mui/material/Divider';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport MenuIcon from '@mui/icons-material/Menu';\r\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\r\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\r\nimport SideMenu  from '../SideBar/SideMenuList';\r\nimport Tooltip from '@mui/material/Tooltip';\r\nimport SearchInput from '../reusableComponents/SearchInput';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport InputAdornment from '@mui/material/InputAdornment';\r\n\r\nimport BusinessCenterIcon from '@mui/icons-material/BusinessCenter';\r\n\r\nimport Badge from '@mui/material/Badge';\r\nimport SearchIcon from '@mui/icons-material/Search';\r\nimport CircleNotificationsOutlinedIcon from '@mui/icons-material/CircleNotificationsOutlined';\r\nimport Avatar from '@mui/material/Avatar';\r\nimport Menu from '@mui/material/Menu';\r\nimport AppRoutes from '../../routes/approutes/AppRoutes';\r\nimport { useMediaQuery } from '@mui/material';\r\nimport MenuItem from '@mui/material/MenuItem';\r\n\r\nconst drawerWidth = 240;\r\n\r\n// Define the custom styles for IconButton\r\nconst CustomIconButton = styled(IconButton)(({ theme }) => ({\r\n  backgroundColor: '#fff', // Replace with your desired color\r\n  '&:hover': {\r\n    backgroundColor: '#fff', // Replace with your desired hover color\r\n  },\r\n  cursor: 'pointer'\r\n}));\r\n\r\n\r\n\r\nconst openedMixin = (theme) => ({\r\n  width: drawerWidth,\r\n  transition: theme.transitions.create('width', {\r\n    easing: theme.transitions.easing.sharp,\r\n    duration: theme.transitions.duration.enteringScreen,\r\n  }),\r\n  overflowX: 'hidden',\r\n});\r\n\r\nconst closedMixin = (theme) => ({\r\n  transition: theme.transitions.create('width', {\r\n    easing: theme.transitions.easing.sharp,\r\n    duration: theme.transitions.duration.leavingScreen,\r\n  }),\r\n  overflowX: 'hidden',\r\n  width: `calc(${theme.spacing(7)} + 1px)`,\r\n  [theme.breakpoints.up('sm')]: {\r\n    width: `calc(${theme.spacing(8)} + 1px)`,\r\n  },\r\n});\r\n\r\nconst DrawerHeader = styled('div')(({ theme }) => ({\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  justifyContent: 'flex-end',\r\n  padding: theme.spacing(0, 1),\r\n  // necessary for content to be below app bar\r\n  ...theme.mixins.toolbar,\r\n}));\r\n\r\nconst AppBar = styled(MuiAppBar, {\r\n  shouldForwardProp: (prop) => prop !== 'open',\r\n})(({ theme, open }) => ({\r\n  zIndex: theme.zIndex.drawer + 1,\r\n  transition: theme.transitions.create(['width', 'margin'], {\r\n    easing: theme.transitions.easing.sharp,\r\n    duration: theme.transitions.duration.leavingScreen,\r\n  }),\r\n  ...(open && {\r\n    marginLeft: drawerWidth,\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    transition: theme.transitions.create(['width', 'margin'], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  }),\r\n}));\r\n\r\nconst Drawer = styled(MuiDrawer, { shouldForwardProp: (prop) => prop !== 'open' })(\r\n  ({ theme, open }) => ({\r\n    width: drawerWidth,\r\n    flexShrink: 0,\r\n    whiteSpace: 'nowrap',\r\n    boxSizing: 'border-box',\r\n    ...(open && {\r\n      ...openedMixin(theme),\r\n      '& .MuiDrawer-paper': openedMixin(theme),\r\n    }),\r\n    ...(!open && {\r\n      ...closedMixin(theme),\r\n      '& .MuiDrawer-paper': closedMixin(theme),\r\n    }),\r\n  }),\r\n);\r\n\r\nexport default function MiniDrawer() {\r\n  const theme = useTheme();\r\n  const [open, setOpen] = React.useState(true);\r\n  const navigate = useNavigate();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const [showJobAnalysis, setShowJobAnalysis] = React.useState(false); // State to control visibility\r\n  const data = localStorage.getItem('userdetails');\r\n  const parseData = JSON.parse(data);\r\n  const handleLogout = () => {\r\n    \r\n    navigate('/login');\r\n    localStorage.removeItem('userdetails');\r\n    window.location.reload();\r\n  };\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handleDrawerOpen = () => {\r\n    setOpen(true);\r\n    setShowJobAnalysis(true);\r\n  };\r\n\r\n  const handleDrawerClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const handleProfileClick = () => {\r\n    handleClose(); // Close the profile menu\r\n    navigate('/profile'); // Navigate to the profile page\r\n  };\r\n\r\n  const isMobileView = useMediaQuery(theme.breakpoints.down('md'));\r\n\r\n  const [move, setMove] = React.useState(!isMobileView); // Drawer is open by default on larger screens\r\n\r\n  React.useEffect(() => {\r\n    setOpen(!isMobileView);\r\n    setShowJobAnalysis(isMobileView); // Set the drawer state based on the screen size\r\n  }, [isMobileView]);\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n          <Box sx={{ display: 'flex' }}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" open={open}>\r\n        <Toolbar sx={{ justifyContent: 'space-between' }}>\r\n          <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n            {isMobileView && (\r\n              <CustomIconButton\r\n                className='Icon-bg-primary-white'\r\n                aria-label=\"open drawer\"\r\n                onClick={() => {\r\n                  setMove(!move)\r\n                  handleDrawerOpen();\r\n                  setShowJobAnalysis(false);\r\n                }}\r\n                edge=\"start\"\r\n                sx={{ mr: 2, ...(open && { display: 'none' }), background: '#fff' }}\r\n              >\r\n                <MenuIcon color=\"primary\" />\r\n              </CustomIconButton>\r\n            )}\r\n            <CustomIconButton\r\n              aria-label=\"open drawer\"\r\n              onClick={() => {\r\n                // setMove(!move)\r\n                handleDrawerOpen();\r\n                setShowJobAnalysis(false);\r\n              }}\r\n              edge=\"start\"\r\n              sx={{ mr: 2, ...(open && { display: 'none' }), ...(isMobileView && { display: 'none' }) }} // Hide on mobile and when drawer is open\r\n            >\r\n              <MenuIcon color=\"primary\" />\r\n            </CustomIconButton>\r\n          </Box>\r\n          <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', width: '100%' }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n              {/* <BusinessCenterIcon\r\n                color='primary'\r\n                marginright={3}\r\n                sx={{ fontSize: 28, display: showJobAnalysis ? 'block' : 'none' }}\r\n                style={{ marginRight: '6px' }}\r\n              />\r\n              <Typography\r\n                variant=\"h6\"\r\n                noWrap\r\n                component=\"div\"\r\n                color='primary'\r\n                paddingRight={1}\r\n                sx={{ fontSize: 23, display: showJobAnalysis ? 'block' : 'none', fontWeight: '700' }}\r\n              >\r\n                Job\r\n              </Typography>\r\n              <Typography\r\n                variant=\"h6\"\r\n                noWrap\r\n                component=\"div\"\r\n                color='#313D4F'\r\n                paddingRight={1}\r\n                sx={{ fontSize: 23, display: showJobAnalysis ? 'block' : 'none', fontWeight: '700' }}\r\n              >\r\n                Analysis\r\n              </Typography> */}\r\n              <SearchInput\r\n                placeholder=\"Search\"\r\n                variant=\"outlined\"\r\n                sx={{\r\n                  '& input': {\r\n                    padding: '5px',\r\n                  },\r\n                }}\r\n                InputProps={{\r\n                  startAdornment: (\r\n                    <InputAdornment position=\"start\">\r\n                      <SearchIcon />\r\n                    </InputAdornment>\r\n                  ),\r\n                }}\r\n              />\r\n            </Box>\r\n            <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end' }}>\r\n              <Badge badgeContent={4} className='badge'  sx={{ marginRight: '20px' }}>\r\n              <Tooltip title=\"Notification\" placement=\"bottom\" arrow>\r\n                <CircleNotificationsOutlinedIcon cursor={'pointer'}/>\r\n              </Tooltip>\r\n              </Badge>\r\n              <Box sx={{ display: 'flex' }}>\r\n                <Box>\r\n                  <Typography color='#fff'>\r\n                    {parseData && parseData.user && parseData.user.email}\r\n                  </Typography>\r\n                  <Typography color='#fff'>\r\n                    {parseData &&parseData.user && parseData.user.rolesData.roleName}\r\n                  </Typography>\r\n                </Box> \r\n                <Tooltip title=\"Account\" placement=\"bottom\" arrow>\r\n                <Avatar\r\n                  onClick={handleClick}\r\n                  sx={{\r\n                    marginLeft: '5px',\r\n                    marginRight: '10px',\r\n                    cursor: 'pointer',\r\n                  }}\r\n                />\r\n                </Tooltip>\r\n                <Menu\r\n                  anchorEl={anchorEl}\r\n                  open={Boolean(anchorEl)}\r\n                  onClose={handleClose}\r\n                  anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'right',\r\n                  }}\r\n                  transformOrigin={{\r\n                    vertical: 'top',\r\n                    horizontal: 'right',\r\n                  }}\r\n                >\r\n                  <MenuItem onClick={handleProfileClick}>Profile</MenuItem>\r\n                  <MenuItem onClick={handleLogout}>Logout</MenuItem>\r\n                </Menu>\r\n              </Box>\r\n            </Box>\r\n          </Box>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Drawer variant=\"permanent\" open={open}>\r\n        <DrawerHeader>\r\n          <BusinessCenterIcon\r\n            color='primary'\r\n            marginright={3}\r\n            sx={{ fontSize: 28, }}\r\n            style={{ marginRight: '6px' }}\r\n          />\r\n          <Typography\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            color='primary'\r\n            paddingRight={1}\r\n            sx={{ fontSize: 23, }}\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            Job\r\n          </Typography>\r\n          <Typography\r\n            variant=\"h6\"\r\n            noWrap\r\n            component=\"div\"\r\n            color='#313D4F'\r\n            paddingRight={1}\r\n            sx={{ fontSize: 23, }}\r\n            style={{ fontWeight: '700' }}\r\n          >\r\n            Analysis\r\n          </Typography>\r\n          <IconButton onClick={handleDrawerClose}>\r\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\r\n          </IconButton>\r\n        </DrawerHeader>\r\n\r\n        <Divider />\r\n        {/* <List>\r\n          {filteredSideMenuList.map((menu) => (\r\n            <ListItem disablePadding key={menu.id}>\r\n              <ListItemButton\r\n                component={Link}\r\n                to={menu.link}\r\n                active={open && location.pathname === menu.link ? true : false}\r\n                sx={{\r\n                  backgroundColor: open && location.pathname === menu.link ? '#1976d2' : 'transparent',\r\n                  color: open && location.pathname === menu.link ? '#fff' : 'inherit', \r\n                  '&:hover': {\r\n                    backgroundColor: '#1976d2',\r\n                    color: '#fff' \r\n                  },\r\n                }}\r\n              >\r\n                {open ? (\r\n                  <ListItemIcon sx={{ color: open && location.pathname === menu.link ? '#fff' : 'inherit' }}>\r\n                    {React.cloneElement(menu.icon, { style: { fontSize: 24 } })} \r\n                  </ListItemIcon>\r\n                ) : (\r\n                  <Tooltip title={menu.displayName} placement=\"right\" arrow>\r\n                    <ListItemIcon sx={{ color: open && location.pathname === menu.link ? '#fff' : 'inherit' }}>\r\n                      {menu.icon && React.cloneElement(menu.icon, { style: { fontSize: 24 } })}\r\n                    </ListItemIcon>\r\n                  </Tooltip>\r\n                )}\r\n                <ListItemText primary={menu.displayName} />\r\n              </ListItemButton>\r\n            </ListItem>\r\n          ))}\r\n        </List> */}\r\n        <List>\r\n      <SideMenu open={open}/>\r\n    </List>\r\n      </Drawer>\r\n      <Box component=\"main\" sx={{ flexGrow: 1, p: 3 }}>\r\n        <DrawerHeader />\r\n        <AppRoutes />\r\n      </Box>\r\n    </Box>\r\n    </ThemeProvider>\r\n\r\n  );\r\n}\r\n","import React from 'react';\r\n\r\n//files import\r\nimport UpdatedNavbar from '../components/UpdatedNavbar/updatednavbar';\r\n// import SideBar from '../components/sidebar/SideBar';\r\n// import AppRoutes from '../routes/approutes/AppRoutes';\r\n\r\nimport './mainLayout.css';\r\n\r\nconst MainLayout = ({ onLogout }) => {\r\n  return (\r\n    <div className='main_layout'>\r\n      <div className='main_container'>\r\n        <UpdatedNavbar />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainLayout;\r\n","import { useState} from 'react';\r\n\r\n\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport { IconButton, InputAdornment, TextField } from '@mui/material';\r\nimport Box from '@mui/material/Box';\r\nimport Grid from '@mui/material/Grid';\r\nimport Button from \"@mui/material/Button\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\n// import Link from \"@mui/material/Link\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport BusinessCenterIcon from '@mui/icons-material/BusinessCenter';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport { useNavigate } from 'react-router-dom'\r\nimport SnackbarComponent from '../components/toastmessage'\r\nimport toast from \"react-hot-toast\"\r\n// import { getHomeRouteForLoggedInUser } from '../utility/Utils'\r\nimport { useForm } from 'react-hook-form'\r\nimport axios from 'axios'\r\n\r\nimport GlobalVariable from '../path/global'\r\n\r\n\r\nconst baseApiUrl = GlobalVariable.BASE_API_URL\r\nconst LoginForm = () => {\r\n  const navigate = useNavigate();\r\n \r\n  //Login formprops\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n  const [isSubmitDisabled, setIsSubmitDisabled] = useState(false)\r\n  const [showPassword, setShowPassword] = useState(false)\r\n\r\n  //useForms Error handling\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm({})\r\n\r\n\r\n  \r\n\r\n  const onSubmit = (data) => {\r\n   \r\n    setIsSubmitDisabled(true)\r\n   \r\n    axios.post(`${baseApiUrl}job_analysis/user/login`, {\r\n      email: data.email,\r\n      password: data.password\r\n    })\r\n    .then(response => {\r\n        console.log(response, \"-------------------------\");\r\n        if (response.data.status_code === 200) {\r\n            const { user, token_type, access_token } = response.data;\r\n            // Now you can use user, token_type, and access_token as needed\r\n\r\n            const userData = {\r\n              user, \r\n              token_type, \r\n              access_token\r\n            }\r\n            // Store updated credentials in local storage\r\n            localStorage.setItem('userdetails', JSON.stringify(userData));\r\n    \r\n            // Force component update or navigation\r\n            navigateAfterRender();\r\n    \r\n            return <SnackbarComponent message=\"This is a success Alert at top right\" position={{ vertical: 'top', horizontal: 'right', color: 'success' }}/>\r\n            console.log(\"successful\");\r\n        }\r\n    })\r\n    .catch(error => {\r\n        console.error(\"Error:\", error);\r\n        if (error.response && error.response.data.detail.status === 401 ) {\r\n            return <SnackbarComponent message=\"This is a success Alert at top right\" position={{ vertical: 'top', horizontal: 'right', color: 'danger'}}/>\r\n        } else if (error.response && error.response.data.status_code === 422) {\r\n            // Handle other specific status codes as needed\r\n        } else {\r\n            // Handle generic error\r\n        }\r\n    })\r\n    .finally(() => {\r\n        setIsSubmitDisabled(false); // Enable the submit button after login attempt\r\n    });\r\n  \r\n  }\r\n\r\n  const navigateAfterRender = () => {\r\n    // After the component re-renders, check local storage and navigate\r\n    const localData = JSON.parse(localStorage.getItem('userdetails'));\r\n    if ( localData.user.roleId === '1') {\r\n      window.location.reload('/users');\r\n    } else {\r\n      navigate('/profile-matching');\r\n      window.location.reload()\r\n\r\n    }\r\n  };\r\n  const handleEmailChange = (e) => {\r\n    const { value } = e.target\r\n    setEmail(value)\r\n  }\r\n\r\n  const handlePasswordChange = (e) => {\r\n    const { value } = e.target\r\n    setPassword(value)\r\n  }\r\n  const handleClickShowPassword = () => {\r\n    setShowPassword(!showPassword)\r\n  }\r\n  return (\r\n    \r\n    <div className='loginForm-container'>\r\n      <Container component=\"main\" maxWidth=\"sm\" justifyContent=\"flex-end\">\r\n        <Card sx={{ minWidth: 275, marginTop: 8, borderRadius: 5 }}>\r\n          <CardContent>\r\n            <Box\r\n              sx={{\r\n                display: \"flex\",\r\n                flexDirection: \"column\",\r\n                alignItems: \"center\",\r\n              }}\r\n            >\r\n              <Box display={'flex'} width={'100%'} className=\"p-5px\">\r\n                <BusinessCenterIcon color='primary' sx={{ fontSize: 30 }} style={{ marginRight: '6px' }} />\r\n                <Typography color='primary' paddingRight={1} sx={{ fontSize: 25 }} style={{ fontWeight: '700' }} >\r\n                  Job\r\n                </Typography>\r\n                <Typography sx={{ fontSize: 25 }} style={{ fontWeight: '700' }}>\r\n                  Analysis\r\n                </Typography>\r\n              </Box>\r\n              <Box className=\"login-form\" width={'100%'}>\r\n                <Grid container justifyContent={'center'} marginTop={2}>\r\n\r\n                  <Typography mt={2} sx={{ fontSize: 32 }} style={{ fontWeight: '700' }} >\r\n                    Login to Account\r\n                  </Typography>\r\n                  <Typography mt={2} sx={{ fontSize: 18 }} >\r\n                    Please enter your email and password to continue\r\n                  </Typography>\r\n\r\n                </Grid>\r\n                <Box component=\"form\" onSubmit={handleSubmit(onSubmit)} noValidate sx={{ mt: 1 }} paddingBottom={5}>\r\n                  <TextField\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    sm={12}\r\n                    id=\"email\"\r\n                    label=\"Email Address\"\r\n                    name=\"email\"\r\n                    {...register('email', {\r\n                      required: 'Email is required'\r\n                    })}\r\n                    error={Boolean(errors.email)}\r\n                    helperText={errors.email?.message}\r\n                    value={email}\r\n                    onChange={(e) => {\r\n                      handleEmailChange(e)\r\n                    }}\r\n                    autoComplete=\"email\"\r\n                    autoFocus\r\n                  />\r\n                  <TextField\r\n                    margin=\"normal\"\r\n                    required\r\n                    fullWidth\r\n                    type={showPassword ? \"text\" : \"password\"}\r\n                    name=\"password\"\r\n                    value={password}\r\n                    label=\"Password\"\r\n                    {...register('password', {\r\n                      required: 'Password is required',\r\n                      minLength: {\r\n                        value: 6,\r\n                        message: 'Password must be at least 6 characters',\r\n                      },\r\n                    })}\r\n                    error={Boolean(errors.password)}\r\n                    helperText={errors.password?.message}\r\n                    onChange={(e) => {\r\n                      handlePasswordChange(e)\r\n                    }}\r\n                    InputProps={{\r\n                      endAdornment: (\r\n                        <InputAdornment position=\"end\">\r\n                          <IconButton\r\n                            aria-label=\"toggle password visibility\"\r\n                            onClick={handleClickShowPassword}\r\n                            edge=\"end\"\r\n                          >\r\n                            {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                          </IconButton>\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    id=\"password\"\r\n                    autoComplete=\"current-password\"\r\n                  />\r\n                  <Grid container alignItems={'center'} justifyContent={'space-between'} display={'inline-flex'}>\r\n                    <Grid item xs={12}>\r\n                      {/* <FormControlLabel\r\n                        control={<Checkbox  {...register('rememberMe')} value=\"remember\" color=\"primary\" />}\r\n                        label=\"Remember me\"\r\n                      /> */}\r\n                    </Grid>\r\n                    {/* <Grid item xs={6} display={'flex'} justifyContent={'end'}>\r\n                  <Link href=\"#\" variant=\"body2\">\r\n                      Forgot password?\r\n                    </Link>\r\n                </Grid> */}\r\n                  </Grid>\r\n                  <Box display={'flex'} justifyContent={'center'}>\r\n                    <Button\r\n                      type=\"submit\"\r\n                      fullWidth\r\n                      variant=\"contained\"\r\n                      sx={{ mt: 3, mb: 2, width: 400, borderRadius: 2 }}\r\n                      disabled={isSubmitDisabled}\r\n                      className='btn btn-submit'\r\n                      size=\"large\"\r\n                    >\r\n                      Sign In\r\n                    </Button>\r\n                  </Box>\r\n\r\n\r\n                </Box>\r\n              </Box>\r\n\r\n            </Box>\r\n          </CardContent>\r\n\r\n        </Card>\r\n\r\n      </Container>\r\n    </div>\r\n\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import React from 'react';\r\nimport Login from '../../Login/login'\r\n// import { Routes, Route} from 'react-router-dom';\r\n\r\nconst LoginRoute = () => {\r\n return(\r\n  \r\n<Login/>\r\n )\r\n\r\n};\r\n\r\nexport default LoginRoute;\r\n","import './App.css';\r\nimport { Routes, Route, Navigate } from 'react-router-dom';\r\nimport MainLayout from './Layout/MainLayout';\r\nimport LoginRoute from './routes/authRoutes/LoginRoute';\r\n// \r\nimport NotFound from './pages/notfound/NotFound';\r\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\r\n\r\n\r\nconst theme = createTheme({\r\n  typography: {\r\n    fontFamily: [\r\n      'Nunito Sans',\r\n      'sans-serif'\r\n    ].join(','),\r\n  },\r\n  components: {\r\n    MuiButton: {\r\n      styleOverrides: {\r\n        // Name of the slot\r\n        root: {\r\n          // Some CSS\r\n          fontFamily: 'Nunito Sans, sans-serif', \r\n          fontWeight: 700,\r\n          textTransform: 'capitalize',\r\n          letterSpacing: '1px',\r\n          color: \"#ffffff !important\",\r\n          fontSize: '20px'\r\n        },\r\n      },\r\n    },\r\n  }\r\n  \r\n});\r\n\r\nfunction App() {\r\n\r\n  const getUserDetails = JSON.parse(localStorage.getItem('userdetails'));\r\n  const isAuthenticated = getUserDetails && getUserDetails.access_token;\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <div className='app'>\r\n      <Routes>\r\n      <Route\r\n            path='/login'\r\n            element={isAuthenticated ? <Navigate to='/profile-matching' replace /> : <LoginRoute />}\r\n          />\r\n          <Route\r\n            path='/*'\r\n            element={isAuthenticated ? <MainLayout /> : <Navigate to='/login' replace />}\r\n          />\r\n           <Route path=\"/profile\" element={<NotFound />} />\r\n         \r\n          <Route path='/not-found' element={<NotFound />} />\r\n          <Route path='*' element={<Navigate to='/not-found' />} />\r\n        </Routes>\r\n    </div>\r\n    </ThemeProvider>\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport Typography from '@mui/material/Typography';\r\nimport Breadcrumbs from '@mui/material/Breadcrumbs';\r\nimport Link from '@mui/material/Link';\r\nimport Box from '@mui/material/Box';\r\n\r\nfunction handleClick(event) {\r\n  event.preventDefault();\r\n  console.info('You clicked a breadcrumb.');\r\n}\r\n\r\nconst ResBreadcrumbs = ({ title, data }) => {\r\n  return (\r\n    <Box display={'flex'} alignItems={'center'} justifyContent={'space-between'} style={{paddingBottom: '10px'}}>\r\n      <Box display={'flex'} alignItems={'center'} justifyContent={'flex-start'}>\r\n        <div className='breadcrumbs-top'>\r\n            <div className=''>\r\n              {title ? <h2 className=' float-start mb-0' style={{color:'#1976d2'}}>{title}</h2> : ''}\r\n            </div>\r\n          </div>\r\n      </Box>\r\n      <Box display={'flex'} alignItems={'center'} justifyContent={'flex-end'}>\r\n\r\n      <div role=\"presentation\" onClick={handleClick} >\r\n      <Breadcrumbs aria-label=\"breadcrumb\" >\r\n        {data.map((item, index) => (\r\n          <Link\r\n            key={index}\r\n            underline=\"hover\"\r\n            color=\"inherit\"\r\n            href={item.link}\r\n            style={{fontSize: '18px', fontWeight: '600', textDecoration: 'none', color:'#1976d2', cursor:'pointer'}}\r\n          >\r\n            {item.title}\r\n          </Link>\r\n        ))}\r\n        <Typography color=\"text.primary\" style={{fontSize: '18px'}}>{title}</Typography>\r\n      </Breadcrumbs>\r\n    </div>\r\n    </Box>\r\n    </Box>\r\n    \r\n  );\r\n};\r\n\r\nexport default ResBreadcrumbs;","const GlobalVariable = Object.freeze({\r\n    BASE_API_URL: 'http://127.0.0.1:8000/',\r\n    BASE_API_GOOGLE_URL: 'http://127.0.0.1:8000/'\r\n    // BASE_API_S3_URL: \"https://sarvanidev.s3.ap-south-1.amazonaws.com/\"\r\n})\r\n\r\n// const GlobalVariable = Object.freeze({\r\n//     BASE_API_URL: \"http://demoassociationapi.curorcdev.com/\",\r\n//     BASE_API_GOOGLE_URL: \"http://demoassociationapi.curorcdev.com\"\r\n// })\r\n\r\nexport default GlobalVariable"],"names":["_ref","_ParseData$user","open","userRole","localStorage","getItem","filteredMenu","roleId","id","name","displayName","link","icon","_jsx","PeopleAltOutlined","ContentPasteSearchOutlined","NoteAddOutlined","InfoOutlined","filter","item","getFilteredMenu","JSON","parse","user","location","useLocation","_Fragment","children","map","menu","ListItem","disablePadding","_jsxs","ListItemButton","component","Link","to","active","pathname","sx","backgroundColor","color","ListItemIcon","Tooltip","title","placement","arrow","ListItemText","primary","SearchContainer","styled","theme","position","borderRadius","border","marginLeft","width","breakpoints","up","spacing","SearchIconWrapper","_ref2","padding","height","pointerEvents","display","alignItems","justifyContent","StyledInputBase","InputBase","_ref3","paddingLeft","concat","transition","transitions","create","SearchInput","SearchIcon","placeholder","inputProps","generateRandomId","Math","random","toString","substring","EditToolbar","props","setRows","setRowModesModel","GridToolbarContainer","marginBottom","marginTop","Box","flexGrow","Button","className","startIcon","AddIcon","onClick","handleClick","oldRows","promptName","promptDescription","isNew","oldModel","mode","GridRowModes","Edit","fieldToFocus","PromptDataGrid","rowsData","onRowsChange","updatePromptRows","rows","useState","rowModesModel","console","log","handleRowEditStop","useCallback","params","event","reason","GridRowEditStopReasons","rowFocusOut","defaultMuiPrevented","handleEditClick","handleSaveClick","View","handleDeleteClick","prevRows","row","handleCancelClick","ignoreModifications","editedRow","find","processRowUpdate","newRow","updatedRow","handleRowModesModelChange","newRowModesModel","useEffect","length","columns","field","headerName","flex","editable","headerClassName","type","cellClassName","getActions","_rowModesModel$id","GridActionsCellItem","SaveIcon","label","CancelIcon","EditIcon","DeleteIcon","DataGrid","editMode","onRowModesModelChange","onRowEditStop","slots","toolbar","slotProps","message","severity","autoHideDuration","vertical","horizontal","setOpen","handleClose","Snackbar","onClose","anchorOrigin","Alert","variant","baseApiUrl","GlobalVariable","BASE_API_URL","initialRows","AddUserList","_errors$name","_errors$email","_errors$password","setName","email","setEmail","isSubmitDisabled","setIsSubmitDisabled","showPassword","setShowPassword","password","setPassword","selectedRole","setSelectedRole","promptRows","setPromptRows","register","handleSubmit","formState","errors","useForm","async","response","axios","get","error","fetchData","Fragment","ResBreadcrumbs","data","Card","Typography","fontSize","fontWeight","CardContent","onSubmit","editedPrompts","requestData","prompts","post","then","status_code","toast","t","ToastSnackbars","status","catch","finally","Grid","container","xs","sm","md","TextField","margin","required","fullWidth","Boolean","helperText","value","onChange","e","target","handleNameChange","autoComplete","autoFocus","handleEmailChange","minLength","handlePasswordChange","InputProps","endAdornment","InputAdornment","IconButton","handleClickShowPassword","edge","VisibilityOff","Visibility","FormControl","top","InputLabel","Select","labelId","MenuItem","newRows","disabled","StyledButton","palette","common","white","main","onSave","formData","setFormData","jobName","jobDescription","handleChange","prevData","Dialog","maxWidth","DialogTitle","style","CloseIcon","DialogContent","multiline","DialogActions","size","handleSave","updatedData","setItem","stringify","initialData","jobdescriptionName","onDelete","handleDelete","JobDescription","isSmallScreen","setIsSmallScreen","searchTerm","setSearchTerm","currentPage","setCurrentPage","entriesToShow","setEntriesToShow","isAddModalOpen","setAddModalOpen","isEditModalOpen","setEditModalOpen","selectedJobData","setSelectedJobData","selectedJobToDelete","setSelectedJobToDelete","isDeleteModalOpen","setDeleteModalOpen","setRowsData","handleResize","window","innerWidth","addEventListener","removeEventListener","renderCell","marginRight","filteredRows","toLowerCase","includes","handleAddModalClose","rowData","handleEditModalClose","handleDeleteModalClose","Breadcrumbs","handleAddModalOpen","pageSize","autoHeight","getRowId","disableRowSelectionOnClick","disableColumnMenu","pagination","paginationMode","onPageChange","page","components","Pagination","CustomPagination","select","option","count","ceil","AddJobModal","handleSaveNewJob","newJobName","newJobDescription","newJob","EditJobModal","handleSaveEditJob","originalJobName","DeleteJobModal","NotFound","paddingRight","ProfileMatchList","lazy","UserData","Prompt","AppRoutes","Routes","Route","path","element","Navigate","replace","drawerWidth","CustomIconButton","cursor","openedMixin","easing","sharp","duration","enteringScreen","overflowX","closedMixin","leavingScreen","DrawerHeader","mixins","AppBar","MuiAppBar","shouldForwardProp","prop","zIndex","drawer","Drawer","MuiDrawer","_ref4","flexShrink","whiteSpace","boxSizing","MiniDrawer","useTheme","React","navigate","useNavigate","anchorEl","setAnchorEl","showJobAnalysis","setShowJobAnalysis","parseData","handleDrawerOpen","isMobileView","useMediaQuery","down","move","setMove","ThemeProvider","CssBaseline","Toolbar","mr","background","MenuIcon","startAdornment","Badge","badgeContent","CircleNotificationsOutlinedIcon","rolesData","roleName","Avatar","currentTarget","Menu","transformOrigin","handleProfileClick","handleLogout","removeItem","reload","BusinessCenterIcon","marginright","noWrap","handleDrawerClose","direction","ChevronLeftIcon","ChevronRightIcon","Divider","List","SideMenu","p","onLogout","UpdatedNavbar","LoginForm","navigateAfterRender","Container","minWidth","flexDirection","mt","token_type","access_token","userData","SnackbarComponent","detail","noValidate","paddingBottom","mb","LoginRoute","Login","createTheme","typography","fontFamily","join","MuiButton","styleOverrides","root","textTransform","letterSpacing","getUserDetails","isAuthenticated","MainLayout","preventDefault","info","role","index","underline","href","textDecoration","Object","freeze","BASE_API_GOOGLE_URL"],"sourceRoot":""}