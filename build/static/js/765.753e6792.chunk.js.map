{"version":3,"file":"static/js/765.753e6792.chunk.js","mappings":"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","sources":["pages/prompts/AddPrompt.jsx","pages/prompts/EditPrompt.jsx","pages/prompts/DeletePrompt.jsx","pages/prompts/prompt.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport Backdrop from '@mui/material/Backdrop';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\nconst AddPromptModal = ({ open, onClose, onSave }) => {\r\n  const [formData, setFormData] = useState({\r\n    promptName: '',\r\n    promptDescription: '',\r\n  });\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevData) => ({ ...prevData, [name]: value }));\r\n  };\r\n\r\n  const handleSave = () => {\r\n    onSave(formData.promptName, formData.promptDescription);\r\n\r\n    // Store data in local storage\r\n    const existingData = JSON.parse(localStorage.getItem('Data')) || [];\r\n    const newData = { promptName: formData.promptName, promptDescription: formData.promptDescription };\r\n    const updatedData = [...existingData, newData];\r\n    localStorage.setItem('promptData', JSON.stringify(updatedData));\r\n\r\n    setFormData({ promptName: '', promptDescription: '' });\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Backdrop sx={{ zIndex: (theme) => theme.zIndex.drawer + 1 }} open={open} onClick={onClose} />\r\n      <Dialog open={open} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', backgroundColor: '#1976D2', color: 'white',height:\"50px\" }}>\r\n          Add Prompt\r\n          <IconButton aria-label=\"close\" onClick={onClose} style={{ color: 'white' }}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            label=\"prompt Name\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            name=\"promptName\"\r\n            value={formData.promptName}\r\n            onChange={handleChange}\r\n          />\r\n          <TextField\r\n            label=\"Prompt Description\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            multiline\r\n            rows={4}\r\n            margin=\"normal\"\r\n            name=\"promptDescription\"\r\n            value={formData.promptDescription}\r\n            onChange={handleChange}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button\r\n            onClick={onClose}\r\n            color=\"secondary\"\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            className=\"btn btn-outline-secondary\"\r\n            style={{ fontSize: '18px' }}\r\n            onMouseOver={(e) => e.target.style.backgroundColor = '#1976D2'}\r\n            onMouseOut={(e) => e.target.style.backgroundColor = ''}\r\n          >\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            onClick={handleSave}\r\n            color=\"primary\"\r\n            variant=\"contained\"\r\n            size=\"small\"\r\n            style={{ fontSize: '18px' }}\r\n          >\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nAddPromptModal.propTypes = {\r\n  open: PropTypes.bool.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  onSave: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default AddPromptModal;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\nconst EditPromptModal = ({ open, onClose, onSave, initialData }) => {\r\n  const [formData, setFormData] = useState({\r\n    promptName: initialData.promptName,\r\n    promptDescription: initialData.promptDescription,\r\n  });\r\n\r\n  useEffect(() => {\r\n    setFormData({\r\n      promptName: initialData.promptName,\r\n      promptDescription: initialData.promptDescription,\r\n    });\r\n  }, [initialData]);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData((prevData) => ({ ...prevData, [name]: value }));\r\n  };\r\n\r\n  const handleSave = () => {\r\n    onSave(initialData.promptName, formData.promptName, formData.promptDescription);\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog open={open} maxWidth=\"sm\" fullWidth>\r\n        <DialogTitle style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', backgroundColor: '#1976D2', color: 'white', height: \"50px\" }}>\r\n          Edit Prompt\r\n          <IconButton aria-label=\"close\" onClick={onClose} style={{ color: 'white' }}>\r\n            <CloseIcon />\r\n          </IconButton>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <TextField\r\n            label=\"Prompt Name\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            name=\"promptName\"\r\n            value={formData.promptName}\r\n            onChange={handleChange}\r\n          />\r\n          <TextField\r\n            label=\"Prompt Description\"\r\n            variant=\"outlined\"\r\n            fullWidth\r\n            multiline\r\n            rows={4}\r\n            margin=\"normal\"\r\n            name=\"promptDescription\"\r\n            value={formData.promptDescription}\r\n            onChange={handleChange}\r\n          />\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={onClose} color=\"primary\" variant=\"outlined\" size=\"small\" style={{ fontSize: '18px' }}>\r\n            Cancel\r\n          </Button>\r\n          <Button onClick={handleSave} color=\"primary\" variant=\"contained\" size=\"small\" style={{ fontSize: '18px' }}>\r\n            Save\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nEditPromptModal.propTypes = {\r\n  open: PropTypes.bool.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  onSave: PropTypes.func.isRequired,\r\n  initialData: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default EditPromptModal;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Dialog from '@mui/material/Dialog';\r\nimport DialogTitle from '@mui/material/DialogTitle';\r\nimport DialogContent from '@mui/material/DialogContent';\r\nimport DialogActions from '@mui/material/DialogActions';\r\nimport Button from '@mui/material/Button';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport CloseIcon from '@mui/icons-material/Close';\r\n\r\nconst DeletePromptModal = ({ open, onClose, onDelete, promptName }) => {\r\n  const handleDelete = () => {\r\n    onDelete(promptName);\r\n    onClose();\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    onClose(false); // Pass false to indicate cancel button was clicked\r\n  };\r\n\r\n  return (\r\n    <Dialog open={open} maxWidth=\"sm\" fullWidth>\r\n      <DialogTitle style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', backgroundColor: '#1976D2', color: 'white',height:\"50px\" }}>\r\n        Delete Prompt\r\n        <IconButton aria-label=\"close\" onClick={onClose} style={{ color: 'white' }}>\r\n          <CloseIcon />\r\n        </IconButton>\r\n      </DialogTitle>\r\n      <DialogContent>\r\n        <p>Are you sure you want to delete the Prompt \"{promptName}\"?</p>\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button\r\n          onClick={handleCancel}\r\n          color=\"secondary\"\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n          className=\"btn btn-outline-secondary\"\r\n          style={{ fontSize: '18px' }}\r\n          onMouseOver={(e) => e.target.style.backgroundColor = '#1976D2'}\r\n          onMouseOut={(e) => e.target.style.backgroundColor = ''}\r\n        >\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          onClick={handleDelete}\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          size=\"small\"\r\n          style={{ fontSize: '18px' }}\r\n        >\r\n          Delete\r\n        </Button>\r\n      </DialogActions>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nDeletePromptModal.propTypes = {\r\n  open: PropTypes.bool.isRequired,\r\n  onClose: PropTypes.func.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  promptName: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default DeletePromptModal;\r\n","  import React, { useEffect, useState } from 'react';\r\n  import { DataGrid } from '@mui/x-data-grid';\r\n  import Card from '@mui/material/Card';\r\n  import CardContent from '@mui/material/CardContent';\r\n  import Breadcrumbs from '@mui/material/Breadcrumbs';\r\n  import Typography from '@mui/material/Typography';\r\n  import Grid from '@mui/material/Grid';\r\n  import Button from '@mui/material/Button';\r\n  import TextField from '@mui/material/TextField';\r\n  import Tooltip from '@mui/material/Tooltip';\r\n  import Pagination from '@mui/material/Pagination';\r\n  import EditIcon from '@mui/icons-material/Edit';\r\n  import DeleteIcon from '@mui/icons-material/Delete';\r\n  import AddPromptModal from './AddPrompt';\r\n  import EditPromptModal from './EditPrompt';\r\n  import DeletePromptModal from './DeletePrompt';\r\n  import MenuItem from '@mui/material/MenuItem';\r\n\r\n  const Prompts = () => {\r\n    const [isSmallScreen, setIsSmallScreen] = useState(false);\r\n    const [searchTerm, setSearchTerm] = useState('');\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [isAddModalOpen, setAddModalOpen] = useState(false);\r\n    const [isEditModalOpen, setEditModalOpen] = useState(false);\r\n    const [selectedPromptData, setSelectedPromptData] = useState(null);\r\n    const [selectedPromptToDelete, setSelectedPromptToDelete] = useState(null);\r\n    const [isDeleteModalOpen, setDeleteModalOpen] = useState(false);\r\n    const [entriesToShow, setEntriesToShow] = useState(5); // Default value is 5\r\n\r\n  \r\n    const [rowsData, setRowsData] = useState([\r\n      { promptName: 'Prompt 1', promptDescription: 'Description 1', lastUpdated: '2024-02-04' },\r\n      { promptName: 'Prompt 2', promptDescription: 'Description 2', lastUpdated: '2024-02-03' },\r\n      { promptName: 'Prompt 3', promptDescription: 'Description 2', lastUpdated: '2024-02-03' },\r\n      { promptName: 'Prompt 4', promptDescription: 'Description 2', lastUpdated: '2024-02-03' },\r\n      \r\n      // Add more rows as needed\r\n    ]);\r\n  \r\n    useEffect(() => {\r\n      const handleResize = () => {\r\n        setIsSmallScreen(window.innerWidth <= 600);\r\n      };\r\n  \r\n      handleResize();\r\n  \r\n      window.addEventListener('resize', handleResize);\r\n  \r\n      return () => {\r\n        window.removeEventListener('resize', handleResize);\r\n      };\r\n    }, []);\r\n  \r\n    const columns = [\r\n      { field: 'promptName', headerName: 'Prompt Name', flex: 1,headerClassName: 'bg-primary text-white' },\r\n      { field: 'promptDescription', headerName: 'Prompt Description', flex: 1,headerClassName: 'bg-primary text-white' },\r\n      { field: 'lastUpdated', headerName: 'Last Updated', flex: 1 ,headerClassName: 'bg-primary text-white'},\r\n      {\r\n        field: 'actions',\r\n        headerName: 'Actions',\r\n        flex: 1,\r\n        renderCell: (params) => (\r\n          <div style={{ display: 'flex' }}>\r\n            <Tooltip title=\"Edit\" arrow>\r\n              <Button\r\n                size=\"small\"\r\n               \r\n                onClick={() => handleEditClick(params.row)}\r\n              >\r\n                <EditIcon className=\"text-primary\"  />\r\n              </Button>\r\n            </Tooltip>\r\n            <Tooltip title=\"Delete\" arrow>\r\n              <Button\r\n                size=\"small\"\r\n               \r\n                onClick={() => handleDeleteClick(params.row.promptName)}\r\n              >\r\n                <DeleteIcon className=\"text-primary\" />\r\n              </Button>\r\n            </Tooltip>\r\n          </div>\r\n        ),\r\n        headerClassName: 'bg-primary text-white',\r\n      },\r\n    ];\r\n  \r\n    const getRowId = (row) => row.promptName;\r\n  \r\n    const filteredRows = rowsData.filter(\r\n      (row) =>\r\n        (row.promptName &&\r\n          row.promptName.toLowerCase().includes(searchTerm.toLowerCase())) ||\r\n        (row.promptDescription &&\r\n          row.promptDescription.toLowerCase().includes(searchTerm.toLowerCase()))\r\n    );\r\n  \r\n    const CustomPagination = () => (\r\n      <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginTop: '8px' }}>\r\n        <div>\r\n          {/* Removed Showing 1 to {Math.min(currentPage * (isSmallScreen ? 3 : 5), filteredRows.length)} of {filteredRows.length} entries */}\r\n        </div>\r\n        <div style={{ display: 'flex', alignItems: 'center' }}>\r\n          <Typography style={{ marginRight: '8px' }}>Rows</Typography>\r\n          <TextField\r\n            select\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            value={entriesToShow}\r\n            onChange={(e) => setEntriesToShow(e.target.value)}\r\n            style={{ width: '60px' }} // Reduced the width\r\n          >\r\n            {[5, 10, 20].map((option) => (\r\n              <MenuItem key={option} value={option}>\r\n                {option}\r\n              </MenuItem>\r\n            ))}\r\n          </TextField>\r\n          {/* <Typography style={{ margin: '0 8px' }}>Entries</Typography> */}\r\n          <Pagination\r\n            color=\"primary\"\r\n            count={Math.ceil(filteredRows.length / entriesToShow)}\r\n            page={currentPage}\r\n            onChange={(event, value) => setCurrentPage(value)}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  \r\n    const handleAddModalOpen = () => {\r\n      setAddModalOpen(true);\r\n    };\r\n  \r\n    const handleAddModalClose = () => {\r\n      setAddModalOpen(false);\r\n    };\r\n  \r\n    const handleEditClick = (rowData) => {\r\n      setSelectedPromptData(rowData);\r\n      setEditModalOpen(true);\r\n    };\r\n  \r\n    const handleEditModalClose = () => {\r\n      setEditModalOpen(false);\r\n      setSelectedPromptData(null);\r\n    };\r\n  \r\n    const handleSaveNewPrompt = (newPromptName, newPromptDescription) => {\r\n      const newPrompt = { \r\n        promptName: newPromptName, \r\n        promptDescription: newPromptDescription,\r\n        lastUpdated: new Date().toISOString().split('T')[0] // Update lastUpdated with current date (YYYY-MM-DD)\r\n      };\r\n      setRowsData((prevRows) => [...prevRows, newPrompt]);\r\n      handleAddModalClose();\r\n    };\r\n  \r\n    const handleSaveEditPrompt = (originalPromptName, newPromptName, newPromptDescription) => {\r\n      setRowsData((prevRows) =>\r\n        prevRows.map((row) =>\r\n          row.promptName === originalPromptName\r\n            ? { \r\n                promptName: newPromptName, \r\n                promptDescription: newPromptDescription, \r\n                lastUpdated: new Date().toISOString().split('T')[0] // Update lastUpdated with current date (YYYY-MM-DD)\r\n              }\r\n            : row\r\n        )\r\n      );\r\n      handleEditModalClose();\r\n    };\r\n  \r\n    const handleDeleteClick = (promptName) => {\r\n      setSelectedPromptToDelete(promptName);\r\n      setDeleteModalOpen(true);\r\n    };\r\n  \r\n    const handleDeleteModalClose = () => {\r\n      setSelectedPromptToDelete(null);\r\n      setDeleteModalOpen(false);\r\n    };\r\n  \r\n    const handleDeletePrompt = (promptName) => {\r\n      setRowsData((prevRows) => prevRows.filter((row) => row.promptName !== promptName));\r\n      handleDeleteModalClose();\r\n    };\r\n  \r\n    return (\r\n      <div>\r\n        <Breadcrumbs aria-label=\"breadcrumb\" className=\"breadcrumbs\">\r\n          <Typography color=\"textPrimary\">Prompt Descriptions</Typography>\r\n        </Breadcrumbs>\r\n  \r\n        <Card variant=\"outlined\" style={{ marginTop: '16px' }}>\r\n          <CardContent>\r\n            <Grid container spacing={2} alignItems=\"center\" justifyContent=\"flex-end\" style={{ marginBottom: '16px' }}>\r\n              <Grid item>\r\n                <Tooltip title=\"Search Prompt Descriptions\" arrow>\r\n                  <TextField\r\n                    label=\"Search\"\r\n                    variant=\"outlined\"\r\n                    size=\"small\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => setSearchTerm(e.target.value)}\r\n                    style={{ marginRight: '8px' }}\r\n                  />\r\n                </Tooltip>\r\n              </Grid>\r\n              <Grid item>\r\n                <Tooltip title=\"Add Prompt Description\" arrow>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    style={{ borderRadius: '10px', marginLeft: '8px' }}\r\n                    onClick={handleAddModalOpen}\r\n                  >\r\n                    Add +\r\n                  </Button>\r\n                </Tooltip>\r\n              </Grid>\r\n              <Grid item xs={12}>\r\n                <div style={{ width: '100%' }}>\r\n                  <DataGrid\r\n                    rows={filteredRows}\r\n                    columns={columns}\r\n                    pageSize={isSmallScreen ? 3 : 5} // Adjust pageSize based on screen size\r\n                    autoHeight\r\n                    getRowId={getRowId}\r\n                    disableRowSelectionOnClick\r\n                    \r\n                    disableColumnMenu\r\n                    pagination\r\n                    paginationMode=\"server\"\r\n                    onPageChange={(params) => setCurrentPage(params.page)}\r\n                    components={{\r\n                      Pagination: CustomPagination,\r\n                    }}\r\n                  />\r\n                </div>\r\n              </Grid>\r\n            </Grid>\r\n          </CardContent>\r\n        </Card>\r\n  \r\n        {/* Add Prompt Modal */}\r\n        <AddPromptModal open={isAddModalOpen} onClose={handleAddModalClose} onSave={handleSaveNewPrompt} />\r\n  \r\n        {/* Edit Prompt Modal */}\r\n        {selectedPromptData && (\r\n          <EditPromptModal\r\n            open={isEditModalOpen}\r\n            onClose={handleEditModalClose}\r\n            onSave={handleSaveEditPrompt}\r\n            initialData={selectedPromptData}\r\n          />\r\n        )}\r\n  \r\n        {/* Delete Prompt Modal */}\r\n        {selectedPromptToDelete && (\r\n          <DeletePromptModal\r\n            open={isDeleteModalOpen}\r\n            onClose={handleDeleteModalClose}\r\n            onDelete={handleDeletePrompt}\r\n            promptName={selectedPromptToDelete}\r\n          />\r\n        )}\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default Prompts;\r\n"],"names":["_ref","open","onClose","onSave","formData","setFormData","useState","promptName","promptDescription","handleChange","e","name","value","target","prevData","_jsxs","children","_jsx","Backdrop","sx","zIndex","theme","drawer","onClick","Dialog","maxWidth","fullWidth","DialogTitle","style","display","alignItems","justifyContent","backgroundColor","color","height","IconButton","CloseIcon","DialogContent","TextField","label","variant","margin","onChange","multiline","rows","DialogActions","Button","size","className","fontSize","onMouseOver","onMouseOut","handleSave","updatedData","JSON","parse","localStorage","getItem","setItem","stringify","initialData","useEffect","onDelete","handleCancel","handleDelete","Prompts","isSmallScreen","setIsSmallScreen","searchTerm","setSearchTerm","currentPage","setCurrentPage","isAddModalOpen","setAddModalOpen","isEditModalOpen","setEditModalOpen","selectedPromptData","setSelectedPromptData","selectedPromptToDelete","setSelectedPromptToDelete","isDeleteModalOpen","setDeleteModalOpen","entriesToShow","setEntriesToShow","rowsData","setRowsData","lastUpdated","handleResize","window","innerWidth","addEventListener","removeEventListener","columns","field","headerName","flex","headerClassName","renderCell","params","Tooltip","title","arrow","handleEditClick","row","EditIcon","handleDeleteClick","DeleteIcon","filteredRows","filter","toLowerCase","includes","handleAddModalClose","rowData","handleEditModalClose","handleDeleteModalClose","Breadcrumbs","Typography","Card","marginTop","CardContent","Grid","container","spacing","marginBottom","item","marginRight","borderRadius","marginLeft","handleAddModalOpen","xs","width","DataGrid","pageSize","autoHeight","getRowId","disableRowSelectionOnClick","disableColumnMenu","pagination","paginationMode","onPageChange","page","components","Pagination","CustomPagination","select","map","option","MenuItem","count","Math","ceil","length","event","AddPromptModal","handleSaveNewPrompt","newPromptName","newPromptDescription","newPrompt","Date","toISOString","split","prevRows","EditPromptModal","handleSaveEditPrompt","originalPromptName","DeletePromptModal"],"sourceRoot":""}